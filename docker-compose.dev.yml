services:
  # Development version of atomspace-api with volume mounts
  atomspace-api-dev:
    build: 
      context: .
      dockerfile: Dockerfile
      cache_from:
        - atomspace-api
    container_name: atomspace-api-dev
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-atomspace123}
      - NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
      - HUGEGRAPH_HOST=hugegraph
      - HUGEGRAPH_PORT=8080
      - HUGEGRAPH_GRAPH=${HUGEGRAPH_GRAPH:-hugegraph}
      - ANNOTATION_SERVICE_URL=${ANNOTATION_SERVICE_URL:-}
      - ANNOTATION_SERVICE_TIMEOUT=${ANNOTATION_SERVICE_TIMEOUT:-300.0}
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount Python code as volumes for hot-reloading
      - ./app:/app/app:ro
      - ./config.yaml:/app/config.yaml:ro
      - ./output:/app/output
      - atomspace_logs:/app/logs
      - shared_output:/shared/output  # API writes CSV files here
    depends_on:
      neo4j:
        condition: service_healthy
      hugegraph:
        condition: service_started
    networks:
      - atomspace-network
    restart: always
    # Use watchmedo for auto-reload (if you have watchdog installed)
    command: python -m app.main
    # Alternative with auto-reload (requires watchdog in requirements.txt):
    # command: watchmedo auto-restart --directory=/app/app --pattern="*.py" --recursive -- python -m app.main

  # Neo4j Database with correct volume mounting
  neo4j:
    image: neo4j:5.15-community
    container_name: neo4j-atomspace
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-atomspace123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      - NEO4J_dbms_directories_import=/var/lib/neo4j/import
      - NEO4J_dbms_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-512m}
      - NEO4J_dbms_memory_heap_max__size=${NEO4J_HEAP_MAX:-2G}
      - NEO4J_dbms_memory_pagecache_size=${NEO4J_PAGECACHE:-1G}
      - NEO4J_server_config_strict__validation_enabled=false
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      # IMPORTANT: Mount shared_output as subdirectory of Neo4j's import directory
      - shared_output:/var/lib/neo4j/import/shared/output
      - neo4j_plugins:/plugins
    networks:
      - atomspace-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USERNAME:-neo4j} -p ${NEO4J_PASSWORD:-atomspace123} 'RETURN 1;'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  hugegraph:
    image: hugegraph/hugegraph:1.5.0
    container_name: hugegraph-atomspace
    ports:
      - "${HUGEGRAPH_REST_PORT:-8080}:8080"
      - "${HUGEGRAPH_GREMLIN_PORT:-8182}:8182"
    environment:
      - HUGEGRAPH_CONF=/hugegraph/conf
    volumes:
      - hugegraph_data:/hugegraph/data
      - hugegraph_logs:/hugegraph/logs
    networks:
      - atomspace-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8080/graphs || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 60s

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  hugegraph_data:
    driver: local
  hugegraph_logs:
    driver: local
  atomspace_logs:
    driver: local
  shared_output:
    driver: local

networks:
  atomspace-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16